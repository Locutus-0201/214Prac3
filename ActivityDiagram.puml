@startuml PetSpace_ActivityDiagram

title User Sending and Saving Message - Activity Diagram

start

:User calls send(message, room);

:Create SendMessageCommand object;
:Create SaveMessageCommand object;

:Add SendMessageCommand to command queue;
:Add SaveMessageCommand to command queue;

:User calls executeAll();

partition "Execute SendMessageCommand" {
    :SendMessageCommand.execute();
    :Call chatRoom.sendMessage(message, fromUser);
    
    partition "ChatRoom processes message" {
        :Iterate through all users in room;
        while (more users?) is (yes)
            :Call user.receive(message, fromUser, room);
        endwhile (no)
        
        :Notify all observers;
        while (more observers?) is (yes)
            :Call observer.update(message, fromUser, room);
        endwhile (no)
    }
}

partition "Execute SaveMessageCommand" {
    :SaveMessageCommand.execute();
    :Call chatRoom.saveMessage(message, fromUser);
    :Append message to chatHistory;
}

:Message successfully sent and saved;

stop

note right
    PATTERNS DEMONSTRATED:
    
    COMMAND PATTERN:
    - SendMessageCommand and SaveMessageCommand
      encapsulate the actions
    - Commands queued and executed in order
    
    MEDIATOR PATTERN:
    - ChatRoom mediates between users
    - Users don't communicate directly
    
    ITERATOR PATTERN:
    - Iterates through users list
    - Iterates through observers list
    
    OBSERVER PATTERN:
    - Notifies services when message sent
    - Allows for logging, notifications, etc.
end note

@enduml