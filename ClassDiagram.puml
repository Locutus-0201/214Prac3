@startuml PetSpace_ClassDiagram

' ==== MEDIATOR PATTERN ====
abstract class ChatRoom {
    - users: List<User>
    - chatHistory: List<String>
    - observers: List<MessageObserver>
    + registerUser(user: User): void
    + removeUser(user: User): void
    + sendMessage(message: String, fromUser: User): void
    + saveMessage(message: String, fromUser: User): void
    + addObserver(observer: MessageObserver): void
    + removeObserver(observer: MessageObserver): void
    + notifyObservers(message: String, fromUser: User): void
    + getUserIterator(): UserIterator
    + getMessageIterator(): MessageIterator
}

class CtrlCat extends ChatRoom {
    + registerUser(user: User): void
    + removeUser(user: User): void
}

class Dogorithm extends ChatRoom {
    + registerUser(user: User): void
    + removeUser(user: User): void
}

' ==== USER CLASS ====
class User {
    - name: String
    - chatRooms: List<ChatRoom>
    - commandQueue: List<Command>
    + send(message: String, room: ChatRoom): void
    + receive(message: String, fromUser: User, room: ChatRoom): void
    + joinRoom(room: ChatRoom): void
    + leaveRoom(room: ChatRoom): void
    + addCommand(command: Command): void
    + executeAll(): void
}

' ==== COMMAND PATTERN ====
abstract class Command {
    # chatRoom: ChatRoom
    # fromUser: User
    # message: String
    + execute(): void
}

class SendMessageCommand extends Command {
    + SendMessageCommand(chatRoom: ChatRoom, fromUser: User, message: String)
    + execute(): void
}

class SaveMessageCommand extends Command {
    + SaveMessageCommand(chatRoom: ChatRoom, fromUser: User, message: String)
    + execute(): void
}

' ==== ITERATOR PATTERN ====
interface Iterator<T> {
    + hasNext(): boolean
    + next(): T
    + reset(): void
}

class UserIterator implements Iterator {
    - users: List<User>
    - position: int
    + UserIterator(users: List<User>)
    + hasNext(): boolean
    + next(): User
    + reset(): void
}

class MessageIterator implements Iterator {
    - messages: List<String>
    - position: int
    + MessageIterator(messages: List<String>)
    + hasNext(): boolean
    + next(): String
    + reset(): void
}

' ==== OBSERVER PATTERN (Additional Pattern) ====
interface MessageObserver {
    + update(message: String, fromUser: User, room: ChatRoom): void
}

class NotificationService implements MessageObserver {
    - activeUsers: List<User>
    + update(message: String, fromUser: User, room: ChatRoom): void
    + sendNotification(user: User, message: String): void
}

class LoggingService implements MessageObserver {
    - logFile: String
    + update(message: String, fromUser: User, room: ChatRoom): void
    + writeToLog(message: String): void
}

' ==== RELATIONSHIPS ====
ChatRoom ||--o{ User : "mediates"
User ||--o{ Command : "queues"
ChatRoom ||--o{ MessageObserver : "notifies"
ChatRoom ..> UserIterator : "creates"
ChatRoom ..> MessageIterator : "creates"
User --> ChatRoom : "sends to"

' ==== PATTERN ANNOTATIONS ====
note right of ChatRoom : MEDIATOR PATTERN\nCentralizes communication\nbetween users
note right of Command : COMMAND PATTERN\nEncapsulates message actions\nfor flexibility and undo/redo
note right of Iterator : ITERATOR PATTERN\nTraverses users and messages\nwithout exposing internal structure
note right of MessageObserver : OBSERVER PATTERN\nNotifies services of new messages\nfor logging and notifications

@enduml